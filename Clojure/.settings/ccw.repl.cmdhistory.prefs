cmdhistory=["(println (big \\"\\" 3))" "(println (big \\"hello\\" 3))" "(big \\"hello\\" 3)" "(big \\"h\\" 3)" "(big \\"hello world\\" 6)" "(big \\"hello\\" 6)" "(def myList '(1 2 3))" "(def myMap {\:a 1, \:b 2, \:c 3})" "(def myVector [1 2 3])" "(println \\"myList\:\\" (class Mylist))" "(println \\"Mylist\:\\" (collection-type myList))" "(collection-type myList)" "(collection-type myMap)" "(collection-type myList)" "(collection-type myMap)" "(collection-type myVector)" "(def myList (1 2 3))" "(def mmyList (1 2 3))" "(def myList '(1 2 3))" "(def myList (list 1 2 3))" "(collection-type myList)" "(unless\\r\\ntrue\\r\\n(println \\"1\: Hey, this is the IF condition\!\\")\\r\\n(println \\"1\: Hey, this is the ELSE condition\!\\")\\r\\n)" "(unless false (println \\"Danger\!\\"))" "(macroexpand ''something-we-do-not-want-interpreted)" "(macroexpand '\#(count %))" "(defmacro unless [test body]\\n  (list 'if (list 'not test) body))" "(macroexpand '(unless condition body))" "(unless true (println \\"No more danger, Will\\"))" "(unless false (println \\"Now, THIS is The Force.\\"))" "user\=> (unless false (println \\"Danger\!\\"))" "\\n(unless false (println \\"Danger\!\\"))" "(unless true (println \\"Danger\!\\") (println \\"No danger...\\"))" "(macroexpand-1 (unless (println \\"unless\\")\\n                       )\\n               )" "(defmacro\\r\\nunless\\r\\n[test if-body else-body]\\r\\n`(if\\r\\n(not ~test)\\r\\n~if-body\\r\\n~else-body\\r\\n)\\r\\n)" "(unless\\r\\ntrue\\r\\n(println \\"1\: Hey, this is the IF condition\!\\")\\r\\n(println \\"1\: Hey, this is the ELSE condition\!\\")\\r\\n)" "(unless\\r\\nfalse\\r\\n(println \\"2\: Hey, this is the IF condition\!\\")\\r\\n(println \\"2\: Hey, this is the ELSE condition\!\\")\\r\\n)" "(defmacro unless [test ifbody elsebody]\\r\\n  (list 'if (list 'not test) \\r\\n        (ifbody)\\r\\n        (elsebody))\\r\\n  )" "(unless\\r\\nfalse\\r\\n(println \\"2\: Hey, this is the IF condition\!\\")\\r\\n(println \\"2\: Hey, this is the ELSE condition\!\\")\\r\\n)" "(defmacro unless [test ifbody elsebody]\\r\\n  (list 'if (list 'not test) \\r\\n        (~ifbody)\\r\\n        (~elsebody))\\r\\n  )" "(unless\\r\\nfalse\\r\\n(println \\"2\: Hey, this is the IF condition\!\\")\\r\\n(println \\"2\: Hey, this is the ELSE condition\!\\")\\r\\n)" "(defmacro unless [test ifbody elsebody]\\r\\n  (list 'if (list 'not test) \\r\\n        (list ifbody)\\r\\n        (list elsebody))\\r\\n  )" "(unless\\r\\nfalse\\r\\n(println \\"2\: Hey, this is the IF condition\!\\")\\r\\n(println \\"2\: Hey, this is the ELSE condition\!\\")\\r\\n)" "(unless\\r\\ntrue\\r\\n(println \\"1\: Hey, this is the IF condition\!\\")\\r\\n(println \\"1\: Hey, this is the ELSE condition\!\\")\\r\\n)" "(defmacro unless [test ifbody elsebody]\\r\\n  (list `if (list `not test) \\r\\n        (list ifbody)\\r\\n        (list elsebody))\\r\\n  )" "(unless\\r\\ntrue\\r\\n(println \\"1\: Hey, this is the IF condition\!\\")\\r\\n(println \\"1\: Hey, this is the ELSE condition\!\\")\\r\\n)" "(unless\\r\\nfalse\\r\\n(println \\"2\: Hey, this is the IF condition\!\\")\\r\\n(println \\"2\: Hey, this is the ELSE condition\!\\")\\r\\n)" "(defmacro unless [test ifbody elsebody]\\r\\n  `(if (list not ~test) \\r\\n         (list ifbody)\\r\\n         (list elsebody))\\r\\n  )" "(unless\\r\\nfalse\\r\\n(println \\"2\: Hey, this is the IF condition\!\\")\\r\\n(println \\"2\: Hey, this is the ELSE condition\!\\")\\r\\n)" "(defmacro unless [test ifbody elsebody]\\r\\n  `(if (list not ~test) \\r\\n         ~ifbody\\r\\n         ~elsebody)\\r\\n  )" "(unless\\r\\nfalse\\r\\n(println \\"2\: Hey, this is the IF condition\!\\")\\r\\n(println \\"2\: Hey, this is the ELSE condition\!\\")\\r\\n)" "(unless\\r\\ntrue\\r\\n(println \\"1\: Hey, this is the IF condition\!\\")\\r\\n(println \\"1\: Hey, this is the ELSE condition\!\\")\\r\\n)" "(unless\\r\\nfalse\\r\\n(println \\"2\: Hey, this is the IF condition\!\\")\\r\\n(println \\"2\: Hey, this is the ELSE condition\!\\")\\r\\n)" "(defmacro unless [test ifbody elsebody]\\r\\n  `(if (list not ~test) \\r\\n         (~ifbody)\\r\\n         (~elsebody))\\r\\n  )" "(unless\\r\\nfalse\\r\\n(println \\"2\: Hey, this is the IF condition\!\\")\\r\\n(println \\"2\: Hey, this is the ELSE condition\!\\")\\r\\n)" "(unless\\r\\ntrue\\r\\n(println \\"1\: Hey, this is the IF condition\!\\")\\r\\n(println \\"1\: Hey, this is the ELSE condition\!\\")\\r\\n)" "(defmacro unless [test ifbody elsebody]\\r\\n  `(if (list `not test) \\r\\n         (list ifbody)\\r\\n         (list elsebody))\\r\\n  )" "(unless\\r\\ntrue\\r\\n(println \\"1\: Hey, this is the IF condition\!\\")\\r\\n(println \\"1\: Hey, this is the ELSE condition\!\\")\\r\\n)" "(defmacro unless [test ifbody elsebody]\\r\\n  (list `if (list `not test) \\r\\n        (list ifbody)\\r\\n        (list elsebody))\\r\\n  )" "(unless\\r\\ntrue\\r\\n(println \\"1\: Hey, this is the IF condition\!\\")\\r\\n(println \\"1\: Hey, this is the ELSE condition\!\\")\\r\\n)" "(unless\\r\\nfalse\\r\\n(println \\"2\: Hey, this is the IF condition\!\\")\\r\\n(println \\"2\: Hey, this is the ELSE condition\!\\")\\r\\n)" "(defmacro unless [test ifbody elsebody]\\r\\n  (list `if (list `not test) \\r\\n        (list `ifbody)\\r\\n        (list `elsebody))\\r\\n  )" "(unless\\r\\ntrue\\r\\n(println \\"1\: Hey, this is the IF condition\!\\")\\r\\n(println \\"1\: Hey, this is the ELSE condition\!\\")\\r\\n)" "(defmacro unless [test ifbody elsebody]\\r\\n  (list `if (list `not test) \\r\\n        (list ifbody)\\r\\n        (list elsebody))\\r\\n  )" "(unless\\r\\ntrue\\r\\n(println \\"1\: Hey, this is the IF condition\!\\")\\r\\n(println \\"1\: Hey, this is the ELSE condition\!\\")\\r\\n)" "(unless\\r\\nfalse\\r\\n(println \\"2\: Hey, this is the IF condition\!\\")\\r\\n(println \\"2\: Hey, this is the ELSE condition\!\\")\\r\\n)" "(defprotocol Compass\\r\\n  (direction [c])\\r\\n  (left [c])\\r\\n  (right [c]))" "(def direction [\:north \:east \:south \:west])" "(defn turn\\r\\n  [base amount]\\r\\n  (rem (+ base amount) (count directions)))" "(defn turn\\r\\n  [base amount]\\r\\n  (rem (+ base amount) (count direction)))" "(turn 1 1)" "(turn 3 1)" "(turn 2 3)" "(defprotocol Dier\\r\\n  \\r\\n  (getName [this name])\\r\\n  (barkName [this])\\r\\n  (poo [this])\\r\\n  )" "(defrecord Hond [name]\\r\\n  Dier\\r\\n  \\r\\n  (getName [this name]\\r\\n    (str \\"Hello \\" name \\", my name is \\" (\:name this))\\r\\n    )\\r\\n  \\r\\n  (barkName [this]\\r\\n    (str \\"Bark Bark\\")\\r\\n    )\\r\\n  \\r\\n  (poo [this]\\r\\n    (str \\"Dogs dont poo\\")\\r\\n    )\\r\\n  )" "(def dino (Dier. \\"Dino\\"))" "(def dino (Dier\\n            \\"Dino\\"))" "(println (getName dino \\"Ben\\"))" "(println (poo dino))" "(def dino (Dier. \\"Dino\\"))" "(def dinoo\\n  (Dier. \\"Dinoo\\"))" "(def dinoo (Dier \\"Dinoo\\"))" "(println (barkName dinoo\\n                   ))" "(println (getName dino \\"Ben\\"))\\r\\n(println (barkName dino))" "\\r\\n(big \\"hello world\\" 6)\\r\\n(big \\"hello\\" 6)" "(is (true? (big \\"Helo world\\" 6))\\n    )" "(is (true? true))" "(use '[clojure.test \:only [is]])" "(is (true? true))" "(is (true? (big \\"hello world\\" 6)))" "(is (true? (big \\"hello\\" 6)))" "(run-tests Day1.core-test)" "(run-all-tests)" "(run-tests-all)" "(bigtrue)" "(run-tests)" "(collection-type myList)\\r\\n(collection-type myMap)\\r\\n(collection-type myVector)" "(collection-type myList)" "(println((collection-type myList))\\n        )" "(big \\"hello world\\" 6)" "(big \\"hello\\" 6)" "(collection-type myList)\\r\\n(collection-type myMap)\\r\\n(collection-type myVector)" "(big \\"hello world\\" 6)"]
eclipse.preferences.version=1
